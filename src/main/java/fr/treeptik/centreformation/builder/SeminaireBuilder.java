// CHECKSTYLE:OFF
/**
 * Source code generated by Fluent Builders Generator
 * Do not modify this file
 * See generator home page at: http://code.google.com/p/fluent-builders-generator-eclipse-plugin/
 */

package fr.treeptik.centreformation.builder;

import fr.treeptik.centreformation.model.Commande;
import fr.treeptik.centreformation.model.Facture;
import fr.treeptik.centreformation.model.SESSION;
import fr.treeptik.centreformation.model.Seminaire;
import fr.treeptik.centreformation.model.Societe;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class SeminaireBuilder extends SeminaireBuilderBase<SeminaireBuilder> {
	public static SeminaireBuilder seminaire() {
		return new SeminaireBuilder();
	}

	public SeminaireBuilder() {
		super(new Seminaire());
	}

	public Seminaire build() {
		return getInstance();
	}
}

class SeminaireBuilderBase<GeneratorT extends SeminaireBuilderBase<GeneratorT>> {
	private Seminaire instance;

	protected SeminaireBuilderBase(Seminaire aInstance) {
		instance = aInstance;
	}

	protected Seminaire getInstance() {
		return instance;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withCodeSeminaire(Integer aValue) {
		instance.setCodeSeminaire(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withPrixSeminaire(Double aValue) {
		instance.setPrixSeminaire(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withDureeSeminaire(Integer aValue) {
		instance.setDureeSeminaire(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withNiveauSeminaire(String aValue) {
		instance.setNiveauSeminaire(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withNbrPlacesSeminaire(Integer aValue) {
		instance.setNbrPlacesSeminaire(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withSessions(List<SESSION> aValue) {
		instance.setSessions(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withAddedSession(SESSION aValue) {
		if (instance.getSessions() == null) {
			instance.setSessions(new ArrayList<SESSION>());
		}

		((ArrayList<SESSION>) instance.getSessions()).add(aValue);

		return (GeneratorT) this;
	}

	public AddedSessionSESSIONBuilder withAddedSession() {
		SESSION obj = new SESSION();

		withAddedSession(obj);

		return new AddedSessionSESSIONBuilder(obj);
	}

	public class AddedSessionSESSIONBuilder extends
			SESSIONBuilderBase<AddedSessionSESSIONBuilder> {
		public AddedSessionSESSIONBuilder(SESSION aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endSession() {
			return (GeneratorT) SeminaireBuilderBase.this;
		}
	}

	public static class SESSIONBuilderBase<GeneratorT extends SESSIONBuilderBase<GeneratorT>> {
		private SESSION instance;

		protected SESSIONBuilderBase(SESSION aInstance) {
			instance = aInstance;
		}

		protected SESSION getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNumeroSession(Integer aValue) {
			instance.setNumeroSession(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDateSession(Date aValue) {
			instance.setDateSession(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withHeureDebut(String aValue) {
			instance.setHeureDebut(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withHeureFin(String aValue) {
			instance.setHeureFin(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCommandes(List<Commande> aValue) {
			instance.setCommandes(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedCommande(Commande aValue) {
			if (instance.getCommandes() == null) {
				instance.setCommandes(new ArrayList<Commande>());
			}

			((ArrayList<Commande>) instance.getCommandes()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedCommandeCommandeBuilder withAddedCommande() {
			Commande obj = new Commande();

			withAddedCommande(obj);

			return new AddedCommandeCommandeBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withSeminaire(Seminaire aValue) {
			instance.setSeminaire(aValue);

			return (GeneratorT) this;
		}

		public SeminaireSeminaireBuilder withSeminaire() {
			Seminaire obj = new Seminaire();

			withSeminaire(obj);

			return new SeminaireSeminaireBuilder(obj);
		}

		public class AddedCommandeCommandeBuilder extends
				CommandeBuilderBase<AddedCommandeCommandeBuilder> {
			public AddedCommandeCommandeBuilder(Commande aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endCommande() {
				return (GeneratorT) SESSIONBuilderBase.this;
			}
		}

		public class SeminaireSeminaireBuilder extends
				SeminaireBuilderBase<SeminaireSeminaireBuilder> {
			public SeminaireSeminaireBuilder(Seminaire aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endSeminaire() {
				return (GeneratorT) SESSIONBuilderBase.this;
			}
		}
	}

	public static class CommandeBuilderBase<GeneratorT extends CommandeBuilderBase<GeneratorT>> {
		private Commande instance;

		protected CommandeBuilderBase(Commande aInstance) {
			instance = aInstance;
		}

		protected Commande getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNumeroCommande(Integer aValue) {
			instance.setNumeroCommande(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDateCommande(Date aValue) {
			instance.setDateCommande(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNbrPlacesCommandees(Integer aValue) {
			instance.setNbrPlacesCommandees(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withFacture(Facture aValue) {
			instance.setFacture(aValue);

			return (GeneratorT) this;
		}

		public FactureFactureBuilder withFacture() {
			Facture obj = new Facture();

			withFacture(obj);

			return new FactureFactureBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withSociete(Societe aValue) {
			instance.setSociete(aValue);

			return (GeneratorT) this;
		}

		public SocieteSocieteBuilder withSociete() {
			Societe obj = new Societe();

			withSociete(obj);

			return new SocieteSocieteBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withSession(SESSION aValue) {
			instance.setSession(aValue);

			return (GeneratorT) this;
		}

		public SessionSESSIONBuilder withSession() {
			SESSION obj = new SESSION();

			withSession(obj);

			return new SessionSESSIONBuilder(obj);
		}

		public class FactureFactureBuilder extends
				FactureBuilderBase<FactureFactureBuilder> {
			public FactureFactureBuilder(Facture aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endFacture() {
				return (GeneratorT) CommandeBuilderBase.this;
			}
		}

		public class SocieteSocieteBuilder extends
				SocieteBuilderBase<SocieteSocieteBuilder> {
			public SocieteSocieteBuilder(Societe aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endSociete() {
				return (GeneratorT) CommandeBuilderBase.this;
			}
		}

		public class SessionSESSIONBuilder extends
				SESSIONBuilderBase<SessionSESSIONBuilder> {
			public SessionSESSIONBuilder(SESSION aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endSession() {
				return (GeneratorT) CommandeBuilderBase.this;
			}
		}
	}

	public static class FactureBuilderBase<GeneratorT extends FactureBuilderBase<GeneratorT>> {
		private Facture instance;

		protected FactureBuilderBase(Facture aInstance) {
			instance = aInstance;
		}

		protected Facture getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNumeroFacture(Integer aValue) {
			instance.setNumeroFacture(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDateFacture(Date aValue) {
			instance.setDateFacture(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withMonatntFacure(Double aValue) {
			instance.setMonatntFacure(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNbrPlaceFacture(Integer aValue) {
			instance.setNbrPlaceFacture(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCommande(Commande aValue) {
			instance.setCommande(aValue);

			return (GeneratorT) this;
		}

		public CommandeCommandeBuilder withCommande() {
			Commande obj = new Commande();

			withCommande(obj);

			return new CommandeCommandeBuilder(obj);
		}

		public class CommandeCommandeBuilder extends
				CommandeBuilderBase<CommandeCommandeBuilder> {
			public CommandeCommandeBuilder(Commande aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endCommande() {
				return (GeneratorT) FactureBuilderBase.this;
			}
		}
	}

	public static class SocieteBuilderBase<GeneratorT extends SocieteBuilderBase<GeneratorT>> {
		private Societe instance;

		protected SocieteBuilderBase(Societe aInstance) {
			instance = aInstance;
		}

		protected Societe getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCodeSociete(Integer aValue) {
			instance.setCodeSociete(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNomSocite(String aValue) {
			instance.setNomSocite(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCommandes(List<Commande> aValue) {
			instance.setCommandes(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedCommande(Commande aValue) {
			if (instance.getCommandes() == null) {
				instance.setCommandes(new ArrayList<Commande>());
			}

			((ArrayList<Commande>) instance.getCommandes()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedCommandeCommandeBuilder withAddedCommande() {
			Commande obj = new Commande();

			withAddedCommande(obj);

			return new AddedCommandeCommandeBuilder(obj);
		}

		public class AddedCommandeCommandeBuilder extends
				CommandeBuilderBase<AddedCommandeCommandeBuilder> {
			public AddedCommandeCommandeBuilder(Commande aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endCommande() {
				return (GeneratorT) SocieteBuilderBase.this;
			}
		}
	}
}
